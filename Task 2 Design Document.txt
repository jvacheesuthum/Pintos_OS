             +-------------------------+
             |         OS 211          |
             |  TASK 2: USER PROGRAMS  |
             |     DESIGN DOCUMENT     |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Kam Chiu <klc114@ic.ac.uk>
Ho Law <hcl114@ic.ac.uk>
Vasin Wongrassamee <vw214@ic.ac.uk>
Jiranart Vacheesuthum <jv1814@ic.ac.uk>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, or notes for the
>> markers, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: (2 marks)
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We did not add any for argument passing.

---- ALGORITHMS ----

>> A2: (8 marks)
>> Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

In process_execute(), a copy of the file_name input is made and tokenised to get the file name to pass into thread_create(). Another copy that stores the page of the process is passed as another argument in thread_create() for start_process().

In start_process(), we first check if the stack pointer after decrementing by the length of the file_name input is still in the user stack to prevent overflowing the stack page. We then allocate memory using malloc() to store the offsets (as an array of int) of the arguments we initially pushed onto the stack and the stack pointer. What this means is that when we first push the arguments onto the top of the stack (not ordered at this point), we can reference them by adding the stack pointer and the offsets of each argument (the stack pointer is pointing to an address lower or equal to the last argument).

To calculate the offsets described above, we used the pointer that keep track of the tokenizer's position. We increment the pointer until it reaches the first character of the next token while also keeping track of the number of arguments. We then subtract the address or file_name (original input) from the pointer and store it in the array of offsets. Because these offsets represents the first to last arguments, we push them onto the stack by traversing the array in reverse order (starting from the back) so the last arguments gets pushed onto the stack first. Afterwards, the argument count gets pushed as well as a return address.

---- RATIONALE ----

>> A3: (5 marks)
>> Why does Pintos implement strtok_r() but not strtok()?

strtok_r() is a reentrant version of strtok() so the save_ptr argument is used internally by the method instead of using a global variable. The save_ptr allows the strtok_r() method to maintain context between successive calls that parse the same string. This means multiple threads can call this method without the program crashing or having undefined behavior which is particularly useful in an operating system where several threads can run at the same time.

>> A4: (10 marks)
>> In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

The Unix approach allows substituting a string for the first word of a simple command (alias substitution). Because the shell tokenizes the input string, it can find any special tokens which can perform certain commands (E.g. substituting words).

Separating the commands in the shell also allows multiple commands to be written in a single line. This means the output of one command can be passed into another command as input. In Pintos, the kernel will treat the multiple command line as a single string where the commands are taken as input to the very first command.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: (10 marks) 
>> Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: (5 marks)
>> Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: (5 marks)
>> Describe your code for reading and writing user data from the
>> kernel.

>> B4: (5 marks)
>> Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: (8 marks)
>> Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: (5 marks)
>> Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated. System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a
>> paragraph, describe the strategy or strategies you adopted for
>> managing these issues.

---- SYNCHRONIZATION ----

>> B7: (5 marks)
>> The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: (5 marks)
>> Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: (5 marks)
>> Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: (5 marks)
>> What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: (2 marks)
>> The default tid_t to pid_t mapping is the identity mapping.
>> Did you change this? Why?
