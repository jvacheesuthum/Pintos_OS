1.git clone https://gitlab.doc.ic.ac.uk/lab1516_spring/pintos_22.git

2. strcpy() can overflow the buffer reserved for its output

3. 4 ticks, 0.04 second

4. Three functions can cause the thread to switch. 
	thread_yield(),
	thread_block(),
	thread_exit() .
These three functions disable interrupts and change the current (running) thread state to be something other than running, and then calls schedule() which is responsible for switching threads. 

The function schedule() then determines which thread to run next by calling next_thread_to_run() function and then call the switch_threads() function to do the actual thread switching, giving the current and the thread chosen to run next as arguments. In the current version of the system the next_thread_to_run() function will not take into account of the thread priority, instead it will just return the the front of the ready_list and if this list is empty it returns an idle thread.

The next thread will be running in the switch_threads() function and the function returns with the that thread becoming the current running thread as a side effect and returns the previously running thread as the return result. 

Interrupts happen when some event happens. When interrupts occur the current running thread will be put to wait. Interrupts cause the corresponding interrupt handlers to update the state of the variables in the cpu, and once the interrupt handler finishes its job, the scheduler will decide which thread to run and wake it up. The thread wakes up with the cpu already in updated state. 

  
5. The property of reproducibility is being able to produce the same solution from a program in every execution, given that the environment stays the same. This means that concurrency does not affect the consistency of the execution. 

Without reproducibility, debugging can get complicated. Locating where the bug occurs can be hard as the program is not deterministic. In addition, fixing a bug in one section can cause some other bug to occur during execution where concurrent processes take place.


6.#include <stdio.h>
  printf(%ul, int);


7. In Pintos, both semaphores and locks are represented by using structs and can be initialize using their own init function passing a pointer to it. Both also has "release" and "acquire" functions to operate (For semaphores these are "up" and "down").
   
Semaphore does not have an owner, it can be "up" or "down" by different threads, but a lock must be owned by a single thread at one time. The same thread must both acquire and release it. A semaphore can have a value greater than 1 while a lock cannot.


8. The size of the execution stack is just under 4 kB. The `struct thread' must not be allowed to grow too big, or there will not be enough room for the kernel stack. Kernel stacks also must not be allowed to grow too large which can cause a stack overflow and corrupt the thread state.
   
The struct thread has an unsigned int member 'magic' which is used to detect stack overflow. Stack overflow tends to change this value which will trigger the assertion in thread_current(). 


9. log : src/devices/build/tests/devices/alarm-multiple.result
   output: src/devices/build/tests/devices/alarm-multiple.output
